x : integer = 0;
y : integer = x; // error
z : integer = x + y; // error 

// this is okay since the return value is void too
func1 : function void (x : integer, y : boolean) = {
}

// this is not okay because the return value does not match the function prototype
func2 : function boolean () = {
	//TODO: solve this problem
}

// this is also okay because the return value matches the prototype
func3 : function boolean (x : boolean) = {
	return x;
}

func4 : function boolean (y : boolean) = {
	return true;
	return x;
	return y;
	return 99;
}

i : boolean = true;

main : function integer () = {
	// for loop

	// okay
	for(;i;) print i;

	if (i) return i; // return wrong type

	if (!i) return 1; // okay

	// boolean + integer
	for(i + 1; i ; i) print i;

	// override i by local variable
	i : integer = 0;

	// okay
	for(i = 0; i < 10; i++) print i;

	// okay
	for(;i < 10;) print i;

	// condition is not boolean
	for(; 1+2; ) print i;


	// if else

	if (true) {

	}

	// assign
	x = z;
	main = func4; // different signature, wrong
	func3 = func4; // same signature, still wrong

	// compare
	98 > 10;
	1 >= 0;

	1 > true; // wrong

	5 != true; // should this be valid?
	false == false;
	func4 == func3;


	// arrays


}
